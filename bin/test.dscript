schema "";

author "McQuenji";
version 0.0.1;
name "TestScript";
description "Random number generator.";
description "For testing purposes.";
license "MIT";
website "https://example.com";
repo "https://github.com/mcquenji/dscript";

permissions fs::read, fs::write;
permissions http::client, http::server;
permissions external::math;

contract Random {
  const bar = 5;
  const srcFile = "bin/test.dscript";

  func test(string name) 
  {
    throw name;
  }



  impl randomNumber(int foo) -> double {
    const l = pi * 5;
    if(5.0 == l) {
      return l;
    } 
    else if(5 > foo && foo < 10) {
      return 4 * bar;
    }else {
      return external::double(math::floor(foo * pi));
    }

  }


  impl randomString() -> string {      
    try {
      log::info("Reading file: " + fs::absolute(srcFile));
      final contents = fs::read(srcFile);
      log::info("Successfully read file");
     
      return contents;
    } catch(e) {
      log::error("Error reading file", error: e);
      return "Error";
    }
  }



  impl test() -> void {
    final string? test = "Test";


    return;


    var string? nonNullable;

     final bool test2 = false;
     //test = "Test2";

     var p = 1.0;
     p = 2.0;

     return;
     }

  hook onLogout() {
    // Hook implementation
    // return "Logout successful!";
  }

  hook onLogin(User user) {
    // Hook implementation

    // return math::floor(1.5);

    //log::info("User logged in: " + user.name);

    //final User? test = @User {
    //  name: "TestUser",
    //  id : 12345
    //};
//
  //
//
    //final  map = {"key1": user};
    //final array = [1, 2, 3, 4, 5];
//
    //log::info("Map: " + map["key1"].name);
//
    //final int x = array[1]!;
    //final string name = test!.name;
  }

}